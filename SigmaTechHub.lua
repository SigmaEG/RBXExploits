--[[ Credits
	
	Creator: Sigma#0002
	Purpose: Used as a Hub for all SigmaTech Scripts
	
]]--

--{ Services }--

local Players = game:GetService("Players");
local StarterGui = game:GetService("StarterGui");
local RunService = game:GetService("RunService");
local UserInputService = game:GetService("UserInputService");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local CoreGui = game:GetService("CoreGui");
local ContextActionService = game:GetService("ContextActionService");

--{ Injection }--

StarterGui:SetCore("SendNotification", {
	Title = "SigmaTech Hub",
	Text = "Status: Injected",
	Duration = 1
});

--{ Variables }--

local Player = Players.LocalPlayer;

if not Players.LocalPlayer then
	Players:GetPropertyChangedSignal("LocalPlayer"):Wait();

	Player = Players.LocalPlayer;
end

--{ Systems }--

local Systems = {} do
	Systems.__index = Systems;

	function Systems.new()
		local self = setmetatable({}, Systems);

		--{ Global Hub Properties }--

		self.UILibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua"))();
		self.Window = self.UILibrary:CreateWindow("SigmaTech Hub");
		self.NavigationSpeed = 1;
		self.WalkSpeed = 16;
		self.JumpPower = 50;
		self.isSpectating = false;

		--{ Clicker Madness Properties }--

		self.ClickerMadnessAutoEnabled = false;
		self.ClickerMadnessComboAmount = 1;

		--{ Legend of the Bone Sword RPG Properties }--

		self.LOTBSCollectingWaterOrbs = false;
		self.LOTBSAutoAttacking = false;

        --{ ESP }--

        self.ESPUIName = "400fwa98dhwn19idha7fdawy5nn521n3"
        self.EnableTeamESP = false
        self.ESPColorChoice = Color3.fromRGB(170, 0, 0)
        self.ESPEnabled = false
        self.BodyPartList = {
            --{ Head }--

            "Head",

            --{ Torso }--

            "UpperTorso",
            "LowerTorso",
            "Torso",

            --{ Left Arm }--

            "LeftUpperArm",
            "LeftLowerArm",
            "LeftHand",
            "Left Arm",

            --{ Right Arm }--

            "RightUpperArm",
            "RightLowerArm",
            "RightHand",
            "Right Arm",

            --{ Left Leg }--

            "LeftUpperLeg",
            "LeftLowerLeg",
            "LeftFoot",
            "Left Leg",

            --{ Right Leg }--

            "RightUpperLeg",
            "RightLowerLeg",
            "RightFoot",
            "Right Leg"
        }

		return self;
	end

	function Systems:LoadLegendOfTheBoneSwordRPG()
		local LOTBSWindow = self.UILibrary:CreateWindow("Game Specific Hub");

		local AutoFolder = LOTBSWindow:CreateFolder("Auto");

		AutoFolder:Toggle("Auto Attack", function(bool)
			self.LOTBSAutoAttacking = bool;

			if self.LOTBSAutoAttacking then
				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Auto Attack]",
					Text = "Status: Enabled",
					Duration = 1
				});

				spawn(function()
					while wait() and self.LOTBSAutoAttacking do
						if ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("UseItem") then
							ReplicatedStorage.Remotes.UseItem:FireServer();
						else
							break;
						end
					end
				end)
			elseif not self.LOTBSAutoAttacking then
				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Auto Attack]",
					Text = "Status: Disabled",
					Duration = 1
				});
			end
		end)

		AutoFolder:Toggle("Collect Water Orbs", function(bool)
			self.LOTBSCollectingWaterOrbs = bool;

			local Character = Player.Character;

			if not Player.Character then
				Player.CharacterAdded:Wait();

				Character = Player.Character;
			end

			if self.LOTBSCollectingWaterOrbs then
				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Water Orbs]",
					Text = "Status: Enabled",
					Duration = 1
				});

				spawn(function()
					while wait(1) and self.LOTBSCollectingWaterOrbs do
						if workspace:FindFirstChild("WaterOrbs") then
							local SavedCFrame = Character:GetPrimaryPartCFrame();

							for _, Orb in next, workspace["WaterOrbs"]:GetChildren() do
								Character:SetPrimaryPartCFrame(Orb.CFrame);

								wait(0.5);
							end

							Character:SetPrimaryPartCFrame(SavedCFrame);
						end
					end
				end)
			elseif not self.LOTBSCollectingWaterOrbs then
				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Water Orbs]",
					Text = "Status: Disabled",
					Duration = 1
				});
			end
		end)
	end

	function Systems:LoadClickerMadness()
		local CMWindow = self.UILibrary:CreateWindow("Game Specific Hub");

		local AutoFolder = CMWindow:CreateFolder("Auto");

		AutoFolder:Slider("Combo Value", {min = 1; max = 10; precise = true}, function(value)
			self.ClickerMadnessComboAmount = value;
		end)

		AutoFolder:Toggle("Auto Clicker", function(bool)
			self.ClickerMadnessAutoEnabled = bool;

			if self.ClickerMadnessAutoEnabled then
				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Auto Clicker]",
					Text = "Status: Enabled",
					Duration = 1
				});

				spawn(function()
					while wait() and self.ClickerMadnessAutoEnabled do
						if ReplicatedStorage:FindFirstChild("Aero"):FindFirstChild("AeroRemoteServices"):FindFirstChild("ClickService"):FindFirstChild("Click") then
							ReplicatedStorage.Aero.AeroRemoteService.ClickService.Click:FireServer(self.ClickerMadnessComboAmount);
						end
					end
				end)
			elseif not self.ClickerMadnessAutoEnabled then
				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Auto Clicker]",
					Text = "Status: Disabled",
					Duration = 1
				});
			end
		end)
	end

	function Systems:LoadCharacterSettings()
		local CharSettingsFolder = self.Window:CreateFolder("Character Settings");

		CharSettingsFolder:Slider("WalkSpeed", {min = 1; max = 500; precise = true}, function(value)
			local Character = Player.Character;

			if not Player.Character then
				Player.CharacterAdded:Wait();

				Character = Player.Character;
			end

			self.WalkSpeed = value;

			repeat wait() until Character.Humanoid do
				Character.Humanoid.WalkSpeed = value;
			end
		end)

		CharSettingsFolder:Slider("JumpPower", {min = 1; max = 500; precise = true}, function(value)
			local Character = Player.Character;

			if not Player.Character then
				Player.CharacterAdded:Wait();

				Character = Player.Character;
			end

			self.JumpPower = value;

			repeat wait() until Character.Humanoid do
				Character.Humanoid.JumpPower = value;
			end
		end)

		Player.CharacterAdded:Connect(function(Character)
			repeat wait() until Character.Humanoid do
				Character.Humanoid.WalkSpeed = self.WalkSpeed;
				Character.Humanoid.JumpPower = self.JumpPower;

				StarterGui:SetCore("SendNotification", {
					Title = "Game Hub [Character Settings]",
					Text = "Status: Settings Applied",
					Duration = 1
				});
			end
		end)
	end

	function Systems:LoadSpectateCamera()
		local Camera = workspace.CurrentCamera;

		workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
			local newCamera = workspace.CurrentCamera;

			if newCamera then
				Camera = newCamera;
			end
		end)

		local SpectateCameraFolder = self.Window:CreateFolder("Spectate Camera");
		local SpectateTarget = "";
		local PlayerNames = {};

		for _, player in next, Players:GetPlayers() do
			if player.Name ~= Player.Name then
				table.insert(PlayerNames, player.Name);
			end
		end

		if #PlayerNames == 0 then
			table.insert(PlayerNames, "No Players Found");
		end

		local PNDropDown = SpectateCameraFolder:Dropdown("Select Player", PlayerNames, true, function(mob)
			if mob ~= "No Players Found" then
				SpectateTarget = mob;
			end
		end)

		local SpectatePlayer = SpectateCameraFolder:Button("Toggle Spectate", function()
			self.isSpectating = not self.isSpectating;

			if self.isSpectating then
				local TargetCharacter = Players[SpectateTarget].Character;

				if TargetCharacter then
					repeat wait() until TargetCharacter.Humanoid do
						Camera.CameraSubject = TargetCharacter.Humanoid
					end

					StarterGui:SetCore("SendNotification", {
						Title = "SigmaTech Hub",
						Text = "Started Spectating " .. SpectateTarget,
						Duration = 1
					});
				end
			elseif not self.isSpectating then
				local Character = Player.Character;

				if not Player.Character then
					Player.CharacterAdded:Wait()

					Character = Player.Character;
				end

				repeat wait() until Character.Humanoid do
					Camera.CameraSubject = Character.Humanoid;
				end

				local TargetCharacter = Players[SpectateTarget].Character;

				if TargetCharacter then
					StarterGui:SetCore("SendNotification", {
						Title = "SigmaTech Hub",
						Text = "Stopped Spectating " .. SpectateTarget,
						Duration = 1
					});
				end
			end
		end)
	end

	function Systems:LoadTeleportToPlayer()
		local TpToPlayerFolder = self.Window:CreateFolder("Teleport To Player");
		local TpTarget = "";
		local PlayerNames = {};

		for _, player in next, Players:GetPlayers() do
			if player.Name ~= Player.Name then
				table.insert(PlayerNames, player.Name);
			end
		end

		if #PlayerNames == 0 then
			table.insert(PlayerNames, "No Players Found");
		end

		local PNDropDown = TpToPlayerFolder:Dropdown("Select Player", PlayerNames, true, function(mob)
			if mob ~= "No Players Found" then
				TpTarget = mob;
			end
		end)

		local TpToPlayer = TpToPlayerFolder:Button("Tp To Player", function()
			local Character = Player.Character;

			if not Player.Character then
				Player.CharacterAdded:Wait();

				Character = Player.Character;
			end

			local TargetCharacter = Players[TpTarget].Character;

			if Character and TargetCharacter then
				Character:SetPrimaryPartCFrame(TargetCharacter:GetPrimaryPartCFrame());

				StarterGui:SetCore("SendNotification", {
					Title = "SigmaTech Hub",
					Text = "Teleported To " .. TpTarget,
					Duration = 1
				});
			else
				StarterGui:SetCore("SendNotification", {
					Title = "SigmaTech Hub",
					Text = "Player [" .. TpTarget .. "] Not Found",
					Duration = 1
				});
			end
		end)

		local function RefreshPlayerList()
			PlayerNames = {};

			for _, player in next, Players:GetPlayers() do
				if player.Name ~= Player.Name then
					table.insert(PlayerNames, player.Name);
				end
			end

			if #PlayerNames == 0 then
				table.insert(PlayerNames, "No Players Found")
			end

			PNDropDown:Refresh(PlayerNames);
		end

		Players.PlayerAdded:Connect(function()
			RefreshPlayerList();
		end)

		Players.PlayerRemoving:Connect(function()
			RefreshPlayerList();
		end)
	end

    function Systems:LoadBasicESP()
        local ESPFolder = self.Window:CreateFolder("Basic ESP (R6/R15)");

        local function UpdateESP(player)
            if self.ESPEnabled then
                if not CoreGui:FindFirstChild(self.ESPUIName) then
                    local UI = Instance.new("ScreenGui")
                    UI.Name = self.ESPUIName
                    UI.Parent = CoreGui
                end

                local ESPUI = CoreGui:WaitForChild(self.ESPUIName)

                if ESPUI:FindFirstChild(player.Name .. " [ESP]") then
                    ESPUI[player.Name .. " [ESP]"]:Destroy()
                end

                spawn(function()
                    if player.Name ~= Player.Name then
                        if self.EnableTeamESP or (not self.EnableTeamESP and player.TeamColor ~= Player.TeamColor) then
                            repeat wait() until player.Character do
                                if player.Character:FindFirstChild("HumanoidRootPart") then
                                    if not ESPUI:FindFirstChild(player.Name .. " [ESP]") then
                                        local PlayerESP = Instance.new("Folder")
                                        PlayerESP.Name = player.Name .. " [ESP]"
                                        PlayerESP.Parent = ESPUI
                                        
                                        --{ Player Name }--

                                        local PNBGUI = Instance.new("BillboardGui")
                                        PNBGUI.Name = player.Name .. " [NAME]"
                                        PNBGUI.Adornee = player.Character.HumanoidRootPart
                                        PNBGUI.AlwaysOnTop = true
                                        PNBGUI.ExtentsOffset = Vector3.new(0, 3, 0)
                                        PNBGUI.Size = UDim2.new(3, 0, 0.75, 0)
                                        PNBGUI.Parent = PlayerESP

                                        local PNText = Instance.new("TextLabel")
                                        PNText.Name = "PlayerName"
                                        PNText.BackgroundTransparency = 1
                                        PNText.BorderSizePixel = 0
                                        PNText.Size = UDim2.new(1, 0, 1, 0)
                                        PNText.Position = UDim2.new(0, 0, 0, 0)
                                        PNText.Font = Enum.Font.Roboto
                                        PNText.Text = player.Name
                                        PNText.TextColor3 = self.ESPColorChoice
                                        PNText.TextScaled = true
                                        PNText.Parent = PNBGUI

                                        --{ Player ESP }--

                                        local ESPItems = Instance.new("Folder")
                                        ESPItems.Name = player.Name .. " [ESP ITEMS]"
                                        ESPItems.Parent = PlayerESP
                                        
                                        for _, BodyPart in next, self.BodyPartList do
                                            if player.Character:FindFirstChild(BodyPart) then
                                                local BPart = player.Character[BodyPart]

                                                local BPartFolder = Instance.new("Folder")
                                                BPartFolder.Name = BodyPart
                                                BPartFolder.Parent = ESPItems

                                                --{ Front }--

                                                local BPartFront = Instance.new("SurfaceGui")
                                                BPartFront.Name = "Front"
                                                BPartFront.Adornee = BPart
                                                BPartFront.AlwaysOnTop = true
                                                BPartFront.Face = "Front"
                                                BPartFront.Parent = BPartFolder

                                                local BPFItem = Instance.new("Frame")
                                                BPFItem.Name = "Front"
                                                BPFItem.BackgroundColor3 = self.ESPColorChoice
                                                BPFItem.BackgroundTransparency = 0.5
                                                BPFItem.BorderSizePixel = 0
                                                BPFItem.Size = UDim2.new(1, 0, 1, 0)
                                                BPFItem.Parent = BPartFront

                                                --{ Back }--

                                                local BPartBack = Instance.new("SurfaceGui")
                                                BPartBack.Name = "Back"
                                                BPartBack.Adornee = BPart
                                                BPartBack.AlwaysOnTop = true
                                                BPartBack.Face = "Back"
                                                BPartBack.Parent = BPartFolder

                                                local BPBItem = Instance.new("Frame")
                                                BPBItem.Name = "Back"
                                                BPBItem.BackgroundColor3 = self.ESPColorChoice
                                                BPBItem.BackgroundTransparency = 0.5
                                                BPBItem.BorderSizePixel = 0
                                                BPBItem.Size = UDim2.new(1, 0, 1, 0)
                                                BPBItem.Parent = BPartBack

                                                --{ Left }--

                                                local BPartLeft = Instance.new("SurfaceGui")
                                                BPartLeft.Name = "Left"
                                                BPartLeft.Adornee = BPart
                                                BPartLeft.AlwaysOnTop = true
                                                BPartLeft.Face = "Left"
                                                BPartLeft.Parent = BPartFolder

                                                local BPLItem = Instance.new("Frame")
                                                BPLItem.Name = "Left"
                                                BPLItem.BackgroundColor3 = self.ESPColorChoice
                                                BPLItem.BackgroundTransparency = 0.5
                                                BPLItem.BorderSizePixel = 0
                                                BPLItem.Size = UDim2.new(1, 0, 1, 0)
                                                BPLItem.Parent = BPartLeft

                                                --{ Right }--

                                                local BPartRight = Instance.new("SurfaceGui")
                                                BPartRight.Name = "Right"
                                                BPartRight.Adornee = BPart
                                                BPartRight.AlwaysOnTop = true
                                                BPartRight.Face = "Right"
                                                BPartRight.Parent = BPartFolder

                                                local BPRItem = Instance.new("Frame")
                                                BPRItem.Name = "Right"
                                                BPRItem.BackgroundColor3 = self.ESPColorChoice
                                                BPRItem.BackgroundTransparency = 0.5
                                                BPRItem.BorderSizePixel = 0
                                                BPRItem.Size = UDim2.new(1, 0, 1, 0)
                                                BPRItem.Parent = BPartRight

                                                --{ Top }--

                                                local BPartTop = Instance.new("SurfaceGui")
                                                BPartTop.Name = "Top"
                                                BPartTop.Adornee = BPart
                                                BPartTop.AlwaysOnTop = true
                                                BPartTop.Face = "Top"
                                                BPartTop.Parent = BPartFolder

                                                local BPTItem = Instance.new("Frame")
                                                BPTItem.Name = "Top"
                                                BPTItem.BackgroundColor3 = self.ESPColorChoice
                                                BPTItem.BackgroundTransparency = 0.5
                                                BPTItem.BorderSizePixel = 0
                                                BPTItem.Size = UDim2.new(1, 0, 1, 0)
                                                BPTItem.Parent = BPartTop

                                                --{ Bottom }--

                                                local BPartBottom = Instance.new("SurfaceGui")
                                                BPartBottom.Name = "Bottom"
                                                BPartBottom.Adornee = BPart
                                                BPartBottom.AlwaysOnTop = true
                                                BPartBottom.Face = "Bottom"
                                                BPartBottom.Parent = BPartFolder

                                                local BPBOItem = Instance.new("Frame")
                                                BPBOItem.Name = "Bottom"
                                                BPBOItem.BackgroundColor3 = self.ESPColorChoice
                                                BPBOItem.BackgroundTransparency = 0.5
                                                BPBOItem.BorderSizePixel = 0
                                                BPBOItem.Size = UDim2.new(1, 0, 1, 0)
                                                BPBOItem.Parent = BPartBottom
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end)
            elseif not self.ESPEnabled then
                if CoreGui:FindFirstChild(self.ESPUIName) then
                    CoreGui[self.ESPUIName]:Destroy()
                end
            end
        end

        local ESPToggle = ESPFolder:Toggle("ESP", function(bool)
            self.ESPEnabled = bool
            
            for _, player in next, Players:GetPlayers() do
                if player.Name ~= Player.Name then
                    UpdateESP(player)
                end
            end

            if self.ESPEnabled then
                StarterGui:SetCore("SendNotification", {
                    Title = "SigmaTech Hub",
                    Text = "Basic ESP Enabled",
                    Duration = 1
                });
            elseif not self.ESPEnabled then
                StarterGui:SetCore("SendNotification", {
                    Title = "SigmaTech Hub",
                    Text = "Basic ESP Disabled",
                    Duration = 1
                });
            end
        end)

        local ESPTeamToggle = ESPFolder:Toggle("Team ESP", function(bool)
            self.EnableTeamESP = bool

            for _, player in next, Players:GetPlayers() do
                if player.Name ~= Player.Name then
                    UpdateESP(player)
                end
            end

            if self.EnableTeamESP then
                StarterGui:SetCore("SendNotification", {
                    Title = "SigmaTech Hub",
                    Text = "Basic Team ESP Enabled",
                    Duration = 1
                });
            elseif not self.EnableTeamESP then
                StarterGui:SetCore("SendNotification", {
                    Title = "SigmaTech Hub",
                    Text = "Basic Team ESP Disabled",
                    Duration = 1
                });
            end
        end)

        for _, player in next, Players:GetPlayers() do
            player.CharacterAdded:Connect(function(char)
                if player.Name ~= Player.Name then
                    UpdateESP(player)
                end
            end)
        end

        Players.PlayerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function(char)
                if player.Name ~= Player.Name then
                    UpdateESP(player)
                end
            end)
        end)

        Players.PlayerRemoving:Connect(function(player)
            if player.Name ~= Player.Name then
                UpdateESP(player)
            end
        end)
    end

	function Systems:LoadFreecam()
		local Camera = workspace.CurrentCamera;

		workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
			local newCamera = workspace.CurrentCamera;

			if newCamera then
				Camera = newCamera;
			end
		end)

		--{ Math Functions }--

		local pi = math.pi
		local abs = math.abs
		local clamp = math.clamp
		local exp = math.exp
		local rad = math.rad
		local sign = math.sign
		local sqrt = math.sqrt
		local tan = math.tan

		--{ Freecam Code }--

		local ToggleInputPriority = Enum.ContextActionPriority.Low.Value;
		local InputPriority = Enum.ContextActionPriority.High.Value;

		local NavigationGain = Vector3.new(1, 1, 1) * 64;
		local PanGain = Vector2.new(0.75, 1) * 8;
		local FOVGain = 300;

		local PitchLimit = rad(90);

		local VelocityStiffness = 1.5;
		local PanStiffness = 1.0;
		local FOVStiffness = 4.0;

		local Spring = {} do
			Spring.__index = Spring;

			function Spring.new(Frequency, Position)
				local self = setmetatable({}, Spring);

				self.Frequency = Frequency;
				self.Position = Position;
				self.Velocity = Position * 0;

				return self;
			end

			function Spring:Update(DT, Goal)
				local Frequency = self.Frequency * 2 * pi;
				local Position0 = self.Position;
				local Velocity0 = self.Velocity;

				local Offset = Goal - Position0;
				local Decay = exp(-Frequency * DT);

				local Position1 = Goal + (Velocity0 * DT - Offset * (Frequency * DT + 1)) * Decay;
				local Velocity1 = (Frequency * DT * (Offset * Frequency - Velocity0) + Velocity0) * Decay;

				self.Position = Position1;
				self.Velocity = Velocity1;

				return Position1;
			end

			function Spring:Reset(Position)
				self.Position = Position;
				self.Velocity = Position * 0;
			end
		end

		local CameraPosition = Vector3.new();
		local CameraRotation = Vector2.new();
		local CameraFOV = 0;

		local VelocitySpring = Spring.new(VelocityStiffness, Vector3.new());
		local PanSpring = Spring.new(PanStiffness, Vector3.new());
		local FOVSpring = Spring.new(FOVStiffness, 0);

		local Input = {} do
			local Keyboard = {
				W = 0,
				A = 0,
				S = 0,
				D = 0,
				E = 0,
				Q = 0,
				U = 0,
				H = 0,
				J = 0,
				K = 0,
				I = 0,
				Y = 0,
				Up = 0,
				Down = 0,
				LeftShift = 0,
				RightShift = 0,
			};

			local Mouse = {
				Delta = Vector2.new(),
				MouseWheel = 0,
			};

			local NavigationKeyboardSpeed = Vector3.new(1, 1, 1);
			local PanMouseSpeed = Vector2.new(1, 1) * (pi / 64);
			local FOVWheelSpeed = 1.0;
			local NavigationAdjSpeed = 0.75;
			local NavigationShiftMultiplier = 2;

			function Input.Vel(DT)
				self.NavigationSpeed = clamp(self.NavigationSpeed + DT * (Keyboard.Up - Keyboard.Down) * NavigationAdjSpeed, 0.01, 4);

				local kKeyboard = Vector3.new(
					Keyboard.D - Keyboard.A + Keyboard.K - Keyboard.H,
					Keyboard.E - Keyboard.Q + Keyboard.I - Keyboard.Y,
					Keyboard.S - Keyboard.W + Keyboard.J - Keyboard.U
				) * NavigationKeyboardSpeed;

				local Shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.RightShift);

				return kKeyboard * (self.NavigationSpeed * (Shift and NavigationShiftMultiplier or 1));
			end

			function Input.Pan(DT)
				local kMouse = Mouse.Delta * PanMouseSpeed;

				Mouse.Delta = Vector2.new();

				return kMouse;
			end

			function Input.FOV(DT)
				local kMouse = Mouse.MouseWheel * FOVWheelSpeed;

				Mouse.MouseWheel = 0;

				return kMouse;
			end

			do
				local function Keypress(action, state, input)
					Keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0;

					return Enum.ContextActionResult.Sink;
				end

				local function MousePan(action, state, input)
					local Delta = input.Delta;

					Mouse.Delta = Vector2.new(-Delta.Y, -Delta.X);

					return Enum.ContextActionResult.Sink;
				end

				local function MouseWheel(action, state, input)
					Mouse[input.UserInputType.Name] = -input.Position.Z;

					return Enum.ContextActionResult.Sink;
				end

				local function Zero(Table)
					for Key, Value in pairs(Table) do
						Table[Key] = Value * 0;
					end
				end

				function Input.StartCapture()
					ContextActionService:BindActionAtPriority("FreecamKeyboard", Keypress, false, InputPriority,
						Enum.KeyCode.W, Enum.KeyCode.U,
						Enum.KeyCode.A, Enum.KeyCode.H,
						Enum.KeyCode.S, Enum.KeyCode.J,
						Enum.KeyCode.D, Enum.KeyCode.K,
						Enum.KeyCode.E, Enum.KeyCode.I,
						Enum.KeyCode.Q, Enum.KeyCode.Y,
						Enum.KeyCode.Up, Enum.KeyCode.Down
					);
					ContextActionService:BindActionAtPriority("FreecamMousePan", MousePan, false, InputPriority, Enum.UserInputType.MouseMovement);
					ContextActionService:BindActionAtPriority("FreecamMouseWheel", MouseWheel, false, InputPriority, Enum.UserInputType.MouseWheel);
				end

				function Input.StopCapture()
					Zero(Keyboard);
					Zero(Mouse);

					ContextActionService:UnbindAction("FreecamKeyboard");
					ContextActionService:UnbindAction("FreecamMousePan");
					ContextActionService:UnbindAction("FreecamMouseWheel");
				end
			end
		end

		local function GetFocusDistance(CameraFrame)
			local ZNear = 0.1;
			local Viewport = Camera.ViewportSize;
			local ProjY = 2 * tan(CameraFOV / 2);
			local ProjX = Viewport.X / Viewport.Y * ProjY;
			local FX = CameraFrame.RightVector;
			local FY = CameraFrame.UpVector;
			local FZ = CameraFrame.LookVector;

			local MinimumVector = Vector3.new();
			local MinimumDistance = 512;

			for X = 0, 1, 0.5 do
				for Y = 0, 1, 0.5 do
					local CX = (X - 0.5) * ProjX;
					local CY = (Y - 0.5) * ProjY;
					local Offset = FX * CX - FY * CY + FZ;
					local Origin = CameraFrame.Position + Offset * ZNear;
					local _, Hit = workspace:FindPartOnRay(Ray.new(Origin, Offset.Unit * MinimumDistance));
					local Distance = (Hit - Origin).Magnitude;

					if MinimumDistance > Distance then
						MinimumDistance = Distance;
						MinimumVector = Offset.Unit;
					end
				end
			end

			return FZ:Dot(MinimumVector) * MinimumDistance;
		end

		local function StepFreecam(DT)
			local Velocity = VelocitySpring:Update(DT, Input.Vel(DT));
			local Pan = PanSpring:Update(DT, Input.Pan(DT));
			local FOV = FOVSpring:Update(DT, Input.FOV(DT));

			local ZoomFactor = sqrt(tan(rad(70 / 2)) / tan(rad(CameraFOV / 2)));

			CameraFOV = clamp(CameraFOV + FOV * FOVGain * (DT / ZoomFactor), 1, 120);
			CameraRotation = CameraRotation + Pan * PanGain * (DT / ZoomFactor);
			CameraRotation = Vector2.new(clamp(CameraRotation.X, -PitchLimit, PitchLimit), CameraRotation.Y % (2 * pi));

			local CameraCFrame = CFrame.new(CameraPosition) * CFrame.fromOrientation(CameraRotation.X, CameraRotation.Y, 0) * CFrame.new(Velocity * NavigationGain * DT);
			CameraPosition = CameraCFrame.Position;

			Camera.CFrame = CameraCFrame;
			Camera.Focus = CameraCFrame * CFrame.new(0, 0, -GetFocusDistance(CameraCFrame));
			Camera.FieldOfView = CameraFOV;
		end

		local PlayerState = {} do
			local MouseBehavior;
			local MouseIconEnabled;
			local CameraType;
			local CameraFocus;
			local CameraCFrame;
			local CameraFieldOfView;
			local ScreenGuis = {}
			local CoreGuis = {
				Backpack = true,
				Chat = true,
				Health = true,
				PlayerList = true,
			}
			local SetCores = {
				BadgesNotificationsActive = true,
				PointsNotificationsActive = true,
			}

			function PlayerState.Push()
				for CoreGuiName in pairs(CoreGuis) do
					CoreGuis[CoreGuiName] = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType[CoreGuiName]);
					StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[CoreGuiName], false);
				end

				for SetCoreName in pairs(SetCores) do
					SetCores[SetCoreName] = StarterGui:GetCore(SetCoreName);
					StarterGui:SetCore(SetCoreName, false);
				end

				local PlayerGui = Player:FindFirstChildOfClass("PlayerGui");

				if PlayerGui then
					for _, Gui in next, PlayerGui:GetChildren() do
						if Gui:IsA("ScreenGui") and Gui.Enabled then
							ScreenGuis[#ScreenGuis + 1] = Gui;
							Gui.Enabled = false;
						end
					end
				end

				CameraFieldOfView = Camera.FieldOfView;
				Camera.FieldOfView = 70;

				CameraType = Camera.CameraType;
				Camera.CameraType = Enum.CameraType.Custom;

				CameraCFrame = Camera.CFrame;
				CameraFocus = Camera.Focus;

				MouseIconEnabled = UserInputService.MouseIconEnabled;
				UserInputService.MouseIconEnabled = false;

				MouseBehavior = UserInputService.MouseBehavior;
				UserInputService.MouseBehavior = Enum.MouseBehavior.Default;
			end

			function PlayerState.Pop()
				for CoreGuiName, isEnabled in pairs(CoreGuis) do
					StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType[CoreGuiName], isEnabled);
				end

				for SetCoreName, isEnabled in pairs(SetCores) do
					StarterGui:SetCore(SetCoreName, isEnabled);
				end

				for _, Gui in next, ScreenGuis do
					if Gui.Parent then
						Gui.Enabled = true;
					end
				end

				Camera.FieldOfView = CameraFieldOfView;
				CameraFieldOfView = nil;

				Camera.CameraType = CameraType;
				CameraType = nil;

				Camera.CFrame = CameraCFrame;
				CameraCFrame = nil;

				Camera.Focus = CameraFocus;
				CameraFocus = nil;

				UserInputService.MouseIconEnabled = MouseIconEnabled;
				MouseIconEnabled = nil;

				UserInputService.MouseBehavior = MouseBehavior;
				MouseBehavior = nil;
			end

			local function StartFreecam()
				spawn(function()
					local Character = Player.Character;

					if not Player.Character then
						Player.CharacterAdded:Wait();

						Character = Player.Character;
					end

					repeat wait() until Character.Humanoid do
						Character.Humanoid.AutoRotate = false
					end
				end)

				local CameraCFrame = Camera.CFrame;
				CameraRotation = Vector2.new(CameraCFrame:toEulerAnglesYXZ())
				CameraPosition = CameraCFrame.Position;
				CameraFOV = Camera.FieldOfView;

				VelocitySpring:Reset(Vector3.new());
				PanSpring:Reset(Vector2.new());
				FOVSpring:Reset(0);

				PlayerState.Push();

				RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam);

				Input.StartCapture();
			end

			local function StopFreecam()
				spawn(function()
					local Character = Player.Character;

					if not Player.Character then
						Player.CharacterAdded:Wait();

						Character = Player.Character;
					end

					repeat wait() until Character.Humanoid do
						Character.Humanoid.AutoRotate = true
					end
				end)

				Input.StopCapture()

				RunService:UnbindFromRenderStep("Freecam");

				PlayerState.Pop();
			end

			local Enabled = false;

			do
				local function ToggleFreecam()
					if Enabled then
						StopFreecam();
					else
						StartFreecam();
					end

					Enabled = not Enabled;
				end

				spawn(function()
					local FreecamFolder = self.Window:CreateFolder("Freecam");

					FreecamFolder:Slider("Camera Speed", {min = 1; max = 100; precise = true;}, function(value)
						self.NavigationSpeed = value;
					end)

					FreecamFolder:Bind("Toggle Freecam", Enum.KeyCode.LeftAlt, function()
						ToggleFreecam();

						if Enabled then
							StarterGui:SetCore("SendNotification", {
								Title = "SigmaTech Freecam",
								Text = "Status: Enabled",
								Duration = 1
							});
						elseif not Enabled then
							StarterGui:SetCore("SendNotification", {
								Title = "SigmaTech Freecam",
								Text = "Status: Disabled",
								Duration = 1
							});
						end
					end)

					FreecamFolder:Bind("Tp To Camera", Enum.KeyCode.RightAlt, function()
						if Enabled then
							local Character = Player.Character;

							if not Player.Character then
								Player.CharacterAdded:Wait();

								Character = Player.Character;
							end

							Character:SetPrimaryPartCFrame(Camera.CFrame);

							StarterGui:SetCore("SendNotification", {
								Title = "SigmaTech Freecam",
								Text = "Teleported To Camera Location",
								Duration = 1
							});
						end
					end)
				end)
			end
		end
	end
end

--{ Load Hub }--

local Hub = Systems.new()
Hub:LoadCharacterSettings()
Hub:LoadTeleportToPlayer()
Hub:LoadFreecam()
Hub:LoadSpectateCamera()
Hub:LoadBasicESP()

local GameList = {
	[5490351219] = "Clicker Madness",
	[428375933] = "Legend of the Bone Sword RPG",
}

function CheckGameID()
	if GameList[game.PlaceId] ~= nil then
		return GameList[game.PlaceId]
	else
		return "None"
	end
end

local GameType = CheckGameID()

if GameType == "Clicker Madness" then
	Hub:LoadClickerMadness()
elseif GameType == "Legend of the Bone Sword RPG" then
	Hub:LoadLegendOfTheBoneSwordRPG()
end
